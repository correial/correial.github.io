[{"url":"https://correial.github.io/Fast Robots/","title":"MAE 4190 Fast Robots Labs","description":null,"body":"","path":null},{"url":"https://correial.github.io/Fast Robots/lab-1/","title":"Lab 1: Artemis Setup and Communication","description":null,"body":"Lab 1a\nDuring section 1a of the lab I installed the Arduino IDE and established a wired connection to communicate with the Artemis Nano. To connect I had to select the correct board and port in the Arduino IDE. Then, to test the connection and explore the Arduino environment I completed the following assigned example sketches in the Arduino IDE:\n\nBasics_blink\nApollo3_serial\nApollo3_analogRead\nPDM_microphoneOutput\n\nBlink\nYou can see the Artemis board flash a bright blue led\n\nBlink test video\nSerial\nHere we can see the Artemis recieves the string and echos it back\n\nSerial output test\nanalogRead Temperature Sensor\n\nTemperature sensor test\nMicrophone Output\nFrom the video you can see the Artemis microphone successfully picking up the difference in sounds in the serial monitor\n\nMicrphone output test\nLab 1b\nCodebase and BLE Discussion\nBluetooth (specifically Bluetooth LE) at a high level is used to establish a connection between my computer and the Artemis:\n\n\nBluetooth LE radio acts like a community bulletin board where Computers (community members) can connect to read the  board. If the radio is a bulletin board we call that a peripheral device and it is responsible for posting data. If the radio is a reader (central device) it reads from any of the bulletin boards. Essentially, central devices view the services, get the data, then move on, all within a few milliseconds allowing multiple central devices can get data from one peripheral.\n\n\nServices are identified by unique numbers known as UUIDs. The ability to define services and characteristics depends on the radio you’re using and its firmware. Bluetooth LE peripherals will provide services, which in turn provide characteristics.\n\n\nThere are four things that a central device can do with a characteristic: Read, Write, Indicate, and Notify\n\n\nThe codebase is collection of source code files that make up our system. Some important components:\n\n\nThe Artemis’ unique UUID and Mac address allow for undisrupted communication and transmission of BLExCharacteristics\n\n\nble_arduino.ino is the code running on the Artemis, edited in the Arduino IDE\n\n\nEString allows us to easily manipulate and send character arrays\n\n\nDemo.ipynb is where you find the python code sending commands to the Artemis\n\n\nSome relevant functions used to communicate between the computer and Artemis:\n\nsend_command(cmd_type, data)to send a command\nble.connect() and ble.disconnect to connect with the Artemis\nreceive_string(uuid) to recieve a string from our board\nstart_notify(uuid, notification_handler) to activate the notification handler\nble.bytearray_to_string(byteArray) to convert recieved data into string\n\n\n\nConfigurations and Setup\n\n\nI started with installing venv: python3 -m pip install --user virtualenv\n\n\nI created the “FastRobots_ble” virtual environment inside my project directory: python3 -m venv FastRobots_ble\n\n\nI activated the virtual environment: source FastRobots_ble/bin/activate\n\n\nI downloaded the provided ble_robot_1.2 codebase into my project directory\n\n\nIt is now time to start the Jupyter server: jupyter lab\n\n\nUpdated the Artemis MAC Address on the Computer. Run the ble_arduino.ino file in the Arduino IDE and check the serial monitor the MAC address:\n\n\n\nMAC Address\n\nGenerate new UUID: run from uuid import uuid4 and uuid4(). Input the generated UUID into the #define BLE_UUID_TEST_SERVICE line in ble_arduino.ino and into the ble_service: line in connections.yaml\n\n\nconnections.yaml\n\nble_arduino.ino\n\nConnect to the Artemis Nano via BLE\n\n\n\nSuccessful BLE Connection\nTask 1\nI sent a string value from my computer to the Artemis board using the  ECHO command and the computer recieved and printed an augmented string\nArduino Code:\n\nJupyter Lab Code:\n\n\n\nECHO Output\nTask 2\nI sent three floats to the Artemis board using the SEND_THREE_FLOATS command and extracted the three floats in the Arduino sketch\nArduino Code:\n\nJupyter Lab Code:\n\n\nSEND_THREE_FLOATS Output\nTask 3\nI added a GET_TIME_MILLIS which makes the robot reply write a string to the string characteristic. Note that GET_TIME_MILLIS had to be added to the cmd_types.py file.\n\nTask 4\nI setup a notification_handler function to receive the string value from the Artemis board and, in the callback function, extract the time from the string.\n\n\n\n\nNotification Handler Output\nTask 5\nI made a twenty-five step loop that gets the current time in milliseconds using the GET_TIME_MILLIS function to then be processed by notification_handler(). From my output shown below you can see that there was an average 33.5 ms gap between the prints. This translates to 29.85 message transmissions per second. With each message being 9 bytes, this results an effective data transfer rate of 269 bytes per second for this method.\n\n\nGET_TIME_MILLIS Loop Output\nTask 6\nI created a command SEND_TIME_DATA that loops though to add generated time steps via the millis() function and then stores them in an array. Then, in SEND_TIME_DATA I loop through the array and send each data point as a string to my laptop to be processed.\nArduino Code\n\nJupyter Code:\n\n\nSEND_TIME_DATA Output\nTask 7\nI created a second array to store fahrenheit temperatures readings with the same length as the one used in task 6. Each element in both arrays (millisArray[] and tempArray[]) correspond to each other. The command GET_TEMP_READINGS loops through both arrays concurrently and sends each temperature reading with a time stamp. The notification handler parses these strings and add populate the data into two lists.\n\n\nTemp and Time Output\nTask 8\nDiscussion and Conclusion (Lab 1A &amp; 1B)\n\nLearned about what commands are responsible for communication between my computer and Artemis\nAt first I was fairly confused about the relationship between different data types and their byte size. However, the later questions in the lab taught me the bytes that correspond to these data values and the most efficient way to send them to the computer depending on the task\nThe largest problem I faced was understanding the parameters needed for the notification handler!\n\n","path":null},{"url":"https://correial.github.io/Fast Robots/lab-2/","title":"Lab 2:","description":null,"body":"Test\n","path":null},{"url":"https://correial.github.io/","title":"About Me","description":null,"body":"\n  Lucca Correia\n  \n    \n      \n    \n  \n  \n    \n      \n    \n  \n\n\n\n\n\n \nJunior at Cornell University studying Mechanical Engineering with a focus in Robotics.\nHere on campus I am on the Cornell Nexus Project Team as well as the Cornell United Soccer Club Team.\n","path":null},{"url":"https://correial.github.io/docs/","title":"Empty for now","description":null,"body":"\n","path":null},{"url":"https://correial.github.io/nexus/","title":"Empty for now","description":null,"body":"","path":null}]